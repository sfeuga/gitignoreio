#!/usr/bin/env bash

# Copyright (C) 2019 Stephane FEUGA OSHIMA
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Written by Stephane FEUGA OSHIMA <sfeuga@member.fsf.org>

VERSION="0.0.1"

function check_errors_msg() {
  grep --color=never '#!! ERROR' .gitignore

  echo -e "Run \"mkgitignore --list\" command or use the <tab> completion to get a valid list of arguments."
}

function initial_setup() {
  if [[ -f "$HOME/.mkgitignorerc" ]]; then
    GITIGNORE_KEYWORDS=''
    gitignore_keywords=''

    # shellcheck source=/dev/null
    . "$HOME/.mkgitignorerc"
    # If $gitignore_systems, $gitignore_editors or $gitignore_cvs are set in
    #   the .mkgitignorerc file assign their values to UPPERCASE var
    if [[ -n "$gitignore_keywords" ]];then
      GITIGNORE_KEYWORDS=$gitignore_keywords
    fi
  fi

  # If UPPERCASE vars are empty, use default values
  if [[ -z "$GITIGNORE_KEYWORDS" ]]; then
    GITIGNORE_KEYWORDS='linux,macos,windows,vim,emacs,sublimetext,git'
  fi
}

function usage() {
  local HELP="Usage: mkgitignore [OPTIONS]... [KEYWORDS]
Create a \".gitignore\" in the current directory.

Options can be:
\t-k,\t--keywords\t\t\tOne or more valid keyword.
\t-d,\t--default\t\t\tCreate a default .gitignore (see manpage).
\t-D,\t--display-default\t\tDisplay default value.
\t\t--help\t\t\t\tDisplay this help and exit.
\t\t--list\t\t\t\tDisplay a full list of valid keywords.
\t\t--version\t\t\tOutput version information and exit.

If a .gitignore already exist it will saved and a new one will be create.
But if a wrong keyword is found no file will be created (and if an original
.gitignore exist it will be not changed).

Examples:
\tmkgitignore --keywords vim,ruby\t\tCreate a .gitignore with \"vim,ruby\" keywords.
\tmkgitignore --list\t\t\tDisplay a full list of valid keywords.

Copyright (C) 2019 Stephane FEUGA OSHIMA.
Version: $VERSION
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Written by Stephane FEUGA OSHIMA <sfeuga@member.fsf.org>."

  echo -e "$HELP"
}

initial_setup

if [[ "$#" -eq "1" ]]; then # One arg only
  # TODO Refactor with a case switch and loop over args
  # TODO Implement an offline version with a cache based on date
  #   ex: if date >= today-7days try to update the list
  # TODO Implement an --upgrade option to update this script and the manual
  if [[ "$1" == "--help" ]]; then
    usage
    exit 0
  elif [[ "$1" == "--version" ]]; then
    echo -e "mkGitignore version $VERSION"
    exit 0
  elif [[ "$1" == '-D' ]] || [[ "$1" == "--display-default" ]]; then
    echo "Default values are: $GITIGNORE_KEYWORDS"
  elif [[ "$1" == "--list" ]]; then
    curl -sL https://www.gitignore.io/api/list | tr '\n' ','
    echo ''
    exit 0
  elif [[ "$1" == '-d' ]] || [[ "$1" == "--default" ]]; then
    # TODO Implement a "--defaut ruby,python" (two args to overide the default arg)
    if [[ -f .gitignore ]]; then
      mv .gitignore .gitignore.bak
    fi
    curl -sL https://www.gitignore.io/api/"$GITIGNORE_KEYWORDS" > .gitignore
  elif [[ "$1" == '-k' ]] || [[ "$1" == "--keywords" ]]; then
    if [[ -f .gitignore ]]; then
      mv .gitignore .gitignore.bak
    fi
    curl -sL https://www.gitignore.io/api/"$1" > .gitignore
  else
    echo "$1 was not a valid options. Use \"$0 --help\" or \"man $0\" to get all valid options."
  fi
else
  usage
  exit 1
fi

# Check if there are errors in .gitignore
if [[ -f .gitignore ]]; then
  # TODO change this feature to handle local cache of valid keywords
  if [[ "$(grep '#!! ERROR' -c .gitignore)" -ne "0" ]]; then
    if [[ -f .gitignore.bak ]]; then
      check_errors_msg
      mv .gitignore.bak .gitignore
      exit 2
    else
      check_errors_msg
      rm .gitignore
      exit 2
    fi
  else
    exit 0
  fi
fi
