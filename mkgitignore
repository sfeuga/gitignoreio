#!/usr/bin/env bash

# Copyright (C) 2019 Stephane FEUGA OSHIMA
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Written by Stephane FEUGA OSHIMA <sfeuga@member.fsf.org>

VERSION="0.0.2"

COPYRIGHT="Copyright (C) 2019 Stephane FEUGA OSHIMA.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Stephane FEUGA OSHIMA <sfeuga@member.fsf.org>."

function existing_gitignore() {
  if [[ -f .gitignore ]]; then
    mv .gitignore .gitignore.bak
  fi
}

function check_errors_msg() {
  grep --color=never '#!! ERROR' .gitignore
  echo -e "Run \"mkgitignore --list\" command or use the <tab> completion to get a valid list of arguments."
}

function initial_setup() {
  if [[ -f "$HOME/.mkgitignorerc" ]]; then
    KEYWORDS=''
    keywords=''

    # shellcheck source=/dev/null
    . "$HOME/.mkgitignorerc"
    # If $gitignore_keywords is set in the .mkgitignorerc file
    #   assign values to UPPERCASE var
    if [[ -n "$keywords" ]];then
      KEYWORDS=$keywords
    fi
  fi

  # If UPPERCASE vars are empty, use default values
  if [[ -z "$KEYWORDS" ]]; then
    KEYWORDS='linux,macos,windows,vim,emacs,sublimetext,git'
  fi
}

function usage() {
  local HELP="Usage: mkgitignore [OPTIONS]... [KEYWORDS]
Create a \".gitignore\" in the current directory.

Options can be:
\t-k,\t--keywords\t\t\tOne or more valid keyword (<TAB> completion available).
\t-d,\t--default\t\t\tCreate a default .gitignore (see manpage).
\t\t--display-default\t\tDisplay default value.
\t\t--help\t\t\t\tDisplay this help and exit.
\t\t--list\t\t\t\tDisplay a full list of valid keywords.
\t\t--version\t\t\tOutput version information and exit.

If a .gitignore already exist it will saved and a new one will be create.
But if a wrong keyword is found no file will be created (and if an original
.gitignore exist it will be not changed).

Examples:
\tmkgitignore --keywords vim,ruby\t\tCreate a .gitignore with \"vim,ruby\" keywords.
\tmkgitignore --list\t\t\tDisplay a full list of valid keywords.

Version: $VERSION

$COPYRIGHT
"

  echo -e "$HELP"
}

initial_setup

if [[ "$#" -eq "0" ]]; then
  usage
  exit 1
fi

while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
  case $1 in
    # TODO Implement an --upgrade option to update this script and the manual
    -k | --keywords )
      existing_gitignore
      if [[ "$3" == "-d" ]] || [[ "$3" == "--default" ]]; then
        curl -sL https://www.gitignore.io/api/"$KEYWORDS,$2" > .gitignore
      else
        curl -sL https://www.gitignore.io/api/"$2" > .gitignore
      fi
      exit 0
      ;;
    -d | --default )
      existing_gitignore
      if [[ "$2" == "-k" ]] || [[ "$2" == "--keywords" ]]; then
        curl -sL https://www.gitignore.io/api/"$KEYWORDS,$3" > .gitignore
      else
        curl -sL https://www.gitignore.io/api/"$KEYWORDS" > .gitignore
      fi
      exit 0
      ;;
    --list )
      curl -sL https://www.gitignore.io/api/list | tr '\n' ',' | sed 's/,/, /g'
      echo ''
      exit 0
      ;;
    --display-default )
      echo "Default values are: $KEYWORDS"
      ;;
    --version )
      echo -e "mkGitignore version $VERSION"
      ;;
    --help )
      usage
      exit 0
      ;;
    * )
      echo "$1 was not a valid options. Use \"mkgitignore --help\" or \"man mkgitignore\" to get all valid options."
      exit 1
      ;;
  esac; shift;
done

# Check if there are errors in .gitignore
if [[ -f .gitignore ]]; then
  if [[ "$(grep '#!! ERROR' -c .gitignore)" -ne "0" ]]; then
    if [[ -f .gitignore.bak ]]; then
      check_errors_msg
      mv .gitignore.bak .gitignore
      exit 2
    else
      check_errors_msg
      rm .gitignore
      exit 2
    fi
  else
    exit 0
  fi
fi
